openapi: 3.0.1

info:
  title: Authors Haven API Documentation
  description: Create a community of like minded authors to foster inspiration and innovation by leveraging the modern web.
  version: 1.0.0
  contact:
    email: teamrambo50@gmail.com

license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /
    desription: Localhost server
  - url: https://authors-haven-development.herokuapp.com/
    desription: Heroku development server

paths:
  /:
    summary: Represent root of the application
    description: Represent root of the application.
    get:
      summary: Returns a welcome message.
      description: Returns a welcome message.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Welcome to Authors Haven
  /api/v1/users/create:
    post:
      summary: Route for signing new users up
      description: Allow new users to register to use the application on providing valid details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/UserSignUp'
        description: user to be created
      responses:
        201:
          description: new user created successfully
        409:
          description: Conflict. Email or username exists
        500:
          description: Internal server error
  /api/v1/sessions/create:
    post:
      summary: Login Route
      description: Allow existing users to login to use the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                userLogin:
                  type: string
                  minLength: 6
                  example: JhayXXX
                password:
                  type: string
                  minLength: 8
                  example: incorrect
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/loginResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        403:
          description: Incorrect username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
  /api/v1/auth/facebook:
    get:
      summary: Route for signing new using facebook
      description: Allow new user to Login using facebook
      responses:
        302:
          description: redirect url
  /api/v1/auth/facebook/callback:
    get:
      summary: redirect url for facebook login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"

  /api/v1/auth/google:
    get:
      summary: Route for signing new using google
      description: Allow new user to Login using google
      responses:
        302:
          description: redirect url
  /api/v1/auth/google/callback:
    get:
      summary: redirect url for google login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"

  /api/v1/auth/twitter:
    get:
      summary: Route for signing new using twitter
      description: Allow new user to Login using twitter
      responses:
        302:
          description: redirect url
  /api/v1/auth/twitter/callback:
    get:
      summary: redirect url for twitter login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"
        "403":
          description: Incorrect username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
      security:
        - BearerAuth: []
  /api/v1/profiles/{username}/follow:
    post:
      summary: Follow user route
      description: Follow user route
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username to follow
          schema:
            type : string
      responses:
        "200":
          description: follow successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
    delete:
      summary: Unfollow user route
      description: Unfollow user route
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username to unfollow
          schema:
            type : string
      responses:
        "200":
          description: unfollow successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unfollowResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"  
                
  /api/v1/user/followings:
    get:
      summary: User followings route
      description: Get all user followed by a particular user 
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: request successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followingResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
                
  /api/v1/user/followers:
    get:
      summary: User followers route
      description: Get all user following a particular user
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: request successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followerResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"

    
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  UserSignUp:
    type: object
    required:
    - firstName
    - lastName
    - userName
    - email
    - password
    properties:
      firstName:
        type: string
        example: Rihanna
      lastName:
        type: string
        example: Adeyemo
      userName:
        type: string
        example: RiriAde
      email:
        type: string
        example: riri.adeyemo@andela.com
      password:
        type: string
        example: incorrect
      confirmPassword:
        type: string
        example: incorrect
  SocialUserSignUp:
    type: object
    required:
    - firstName
    - lastName
    - userName
    - email
    - password
    - token
    properties:
      id:
        type: string
        example: 1
      firstName:
        type: string
        example: Adekay
      lastName:
        type: string
        example: Ade
      userName:
        type: string
        example: korey
      email:
        type: string
        example: riri.adeyemo@andela.com
      password:
        type: string
        example: incorrect
      confirmPassword:
        type: string
        example: incorrect
      token:
        type: string
        example: bhddmdmddddddddddddmddnddb
  schemas:
    loginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id: 
              type: integer
              example: 1
            userName:
              type: string
              example: JhayXXX
            firstName:
              type: string
              example: ade
            lastName:
              type: string
              example: chukwu
            email:
              type: string
              example: abiola@andela.com
        token:
          type: string
    errorResponse:
      type: object
      properties:
        message:
          type: string
    serverResponse:
      type: object
      properties:
        error:
          type: string
    SocialserverResponse:
      type: object
      properties:
        message:
          type: string
          example: Auth failed
    signoutResponse:
      type: object
      properties:
        message:
          type: string
    followResponse:
      type: object
      properties:
        following:
          type: object
          properties:
            message:
              type: string
              example: followed successfully
            data:
              type: object
              properties:
                id: 
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 1
                followerId:
                  type: integer
                  example: 2
        
    unfollowResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id: 
              type: integer
            message:
              type: string
              example: you successfully unfollowed user2
    followingResponse:
      type: object
      properties:
        followings:
          type: array
          items:
            type: object
            properties:
              id: 
                type: integer
                example: 1
              userId:
                type: integer
                example: 1
              followerId:
                type: integer
                example: 2
              following:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 1
                  userName:
                    type: string
                    example: JhayXXX
                  firstName:
                    type: string
                    example: ade
                  lastName:
                    type: string
                    example: chukwu
                  email:
                    type: string
                    example: abiola@andela.com
    followerResponse:
      type: object
      properties:
        followers:
          type: array
          items:
            type: object
            properties:
              id: 
                type: integer
                example: 1
              userId:
                type: integer
                example: 1
              followerId:
                type: integer
                example: 2
              follower:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 1
                  userName:
                    type: string
                    example: JhayXXX
                  firstName:
                    type: string
                    example: ade
                  lastName:
                    type: string
                    example: chukwu
                  email:
                    type: string
                    example: abiola@andela.com
